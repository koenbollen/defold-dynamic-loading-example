
local registry = require("biomes.registry")

local BIOME_NAMES = {
	[hash("biome01")] = "biome01",
	[hash("biome02")] = "biome02",
}

local function biomes_to_string(...)
	local t = {}
	for i = 1, select("#", ...) do
		table.insert(t, BIOME_NAMES[select(i, ...)])
	end
	return table.concat(t, ", ")
end

local function load_biome_proxy(biome_id)
	local proxy_url = msg.url(nil, "biomes", biome_id)
	msg.post(proxy_url, "async_load")
end

local function post_biomes_loaded(self, url, biomes)
	local atlases = {}
	for _, biome in ipairs(biomes) do
		table.insert(atlases, self.atlas_by_biome[biome])
	end
	msg.post(url, "biomes_loaded", {
		biomes = biomes,
		atlases = atlases,
	})
end

local function on_biome_initialized(self, data, sender)
	-- this is recieved straight from the biome.script in the biome collection,
	-- so it's socket is it's biome_id.
	local biome_id = sender.socket

	self.atlas_by_biome[biome_id] = data.decals

	print("Biome loaded: " .. biomes_to_string(biome_id), data.decals)

	for request_id, req in pairs(self.requests) do
		local done = true
		for _, biome in ipairs(req.biomes) do
			if not self.atlas_by_biome[biome] then
				done = false
				break
			end
		end
		if done then
			post_biomes_loaded(self, req.sender, req.biomes)
			self.requests[request_id] = nil
		end
	end
end

function init(self)
	registry.callback = function(data, sender)
		on_biome_initialized(self, data, sender)
	end

	-- self.loader is used to load a biome, by default this loads the biome-proxy collection directly.
	self.loader = load_biome_proxy
	if liveupdate then
		-- if liveupdate is enabled, we use the downloader to download the resourcepack for the biome, and
		-- then load the biome-proxy collection.

		local downloader = require("biomes.downloader")
		downloader.init()

		self.loader = function(biome_id)
			local proxy_url = msg.url(nil, "biomes", biome_id)
			local missing_resources = collectionproxy.missing_resources(proxy_url)
			if next(missing_resources) ~= nil then
				print("Downloading biome: " .. biomes_to_string(biome_id))
				downloader.load(biome_id, BIOME_NAMES[biome_id], missing_resources, load_biome_proxy)
			else
				load_biome_proxy(biome_id)
			end
		end
	end

	self.requests = {}
	self.atlas_by_biome = {}

	self.active = {}
	self.unloading = {}
	self.should_reload = {}
end

function final(self)
	for _, biome_url in pairs(self.active) do
		msg.post(biome_url, "unload")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("biomes_ensure") then
		local biomes = message.biomes

		print("Ensuring biomes " .. biomes_to_string(unpack(biomes)) .. " are loaded")

		local dont_unload = {}
		local all_biomes_loaded = true
		for _, biome_id in ipairs(biomes) do
			dont_unload[biome_id] = true
			if self.unloading[biome_id] then
				all_biomes_loaded = false
				self.should_reload[biome_id] = true
			elseif not self.atlas_by_biome[biome_id] then
				all_biomes_loaded = false
				self.loader(biome_id)
			end
		end
		if all_biomes_loaded then
			post_biomes_loaded(self, sender, biomes)
		else
			local request_id = math.random(1, 1000000)
			self.requests[request_id] = {
				sender = sender,
				biomes = biomes,
			}
		end

		-- unload any biomes that are not needed
		for biome_id, _ in pairs(self.active) do
			if not dont_unload[biome_id] then
				self.unloading[biome_id] = true
				msg.post(self.active[biome_id], "unload")
				print("Unloading biome: " .. biomes_to_string(biome_id))
			end
		end
	end

	if message_id == hash("proxy_loaded") then
		-- we get the proxy_loaded message from the proxy in the main collection,
		-- the fragment name of this component is the biome_id.
		local biome_id = sender.fragment
		self.active[biome_id] = sender
		-- once a biome-proxy has been loaded, we make it initializes,
		-- the biome.script's init() function will trigger registry.callback()
		-- which contains the loaded atlas.
		msg.post(sender, "init")
		-- these biome-proxies are never enabled.
	end

	if message_id == hash("proxy_unloaded") then
		local biome_id = sender.fragment
		self.active[biome_id] = nil
		self.unloading[biome_id] = nil
		self.atlas_by_biome[biome_id] = nil

		if self.should_reload[biome_id] then
			self.should_reload[biome_id] = nil
			msg.post(sender, "async_load") -- reload doesn't need self.loader() since it was already loaded
			print("Biome unloaded: " .. biomes_to_string(biome_id) .. ", but should be reloaded")
		else
			print("Biome unloaded: " .. biomes_to_string(biome_id))
		end
	end
end
